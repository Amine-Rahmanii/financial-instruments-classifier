"""
Application Streamlit pour la classification d'instruments financiers
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import yfinance as yf
import warnings
import sys
import os

# Ajouter le r√©pertoire racine au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from src.feature_engineering import FinancialFeatureEngineer
    FEATURE_ENGINEERING_AVAILABLE = True
except ImportError as e:
    st.warning(f"‚ö†Ô∏è Feature engineering module non disponible: {e}")
    FEATURE_ENGINEERING_AVAILABLE = False

warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(
    page_title="Classificateur d'Instruments Financiers",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

class FinancialClassifierApp:
    def __init__(self):
        self.label_names = {0: 'Action', 1: 'ETF', 2: 'Obligation'}
        self.load_models()
        
    def load_models(self):
        """Charge les mod√®les entra√Æn√©s avec des chemins absolus"""
        import os
        base_dir = os.path.dirname(os.path.abspath(__file__))
        models_dir = os.path.join(base_dir, 'models')
        data_dir = os.path.join(base_dir, 'data')
        try:
            with open(os.path.join(models_dir, 'random_forest.pkl'), 'rb') as f:
                self.rf_model = pickle.load(f)
            with open(os.path.join(models_dir, 'xgboost.pkl'), 'rb') as f:
                self.xgb_model = pickle.load(f)
            with open(os.path.join(models_dir, 'lightgbm.pkl'), 'rb') as f:
                self.lgb_model = pickle.load(f)
            with open(os.path.join(models_dir, 'logistic_regression.pkl'), 'rb') as f:
                self.lr_model = pickle.load(f)
            with open(os.path.join(models_dir, 'scaler.pkl'), 'rb') as f:
                self.scaler = pickle.load(f)
            with open(os.path.join(models_dir, 'results.pkl'), 'rb') as f:
                self.results = pickle.load(f)
            self.models_loaded = True
            self.feature_names = pd.read_csv(os.path.join(data_dir, 'feature_names.csv'))['feature'].tolist()
        except FileNotFoundError:
            self.models_loaded = False
    
    def display_header(self):
        """Affiche l'en-t√™te de l'application"""
        st.markdown('<h1 class="main-header">üìà Classificateur d\'Instruments Financiers</h1>', unsafe_allow_html=True)
        
        st.markdown("""
        Cette application utilise des mod√®les de machine learning pour classer automatiquement 
        les instruments financiers en trois cat√©gories : **Actions**, **ETF**, et **Obligations**.
        """)
        
        st.markdown("---")
    
    def display_sidebar(self):
        """Affiche la barre lat√©rale"""
        st.sidebar.title("üîß Configuration")
        
        # S√©lection de l'onglet
        tab = st.sidebar.selectbox(
            "Choisir une section",
            ["üè† Accueil", "üìä Performance des Mod√®les", "üîÆ Pr√©diction", "üìà Analyse de Donn√©es", "‚ÑπÔ∏è √Ä propos"]
        )
        
        return tab
    
    def display_model_performance(self):
        """Affiche les performances des mod√®les"""
        st.header("üìä Performance des Mod√®les")
        
        if not self.models_loaded:
            st.error("‚ùå Les mod√®les n'ont pas √©t√© trouv√©s. Veuillez d'abord entra√Æner les mod√®les.")
            return
        
        # R√©sum√© des performances
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üèÜ R√©sum√© des Performances")
            
            # Cr√©er un DataFrame de r√©sum√©
            summary_data = []
            for model_name, results in self.results.items():
                summary_data.append({
                    'Mod√®le': model_name.replace('_', ' ').title(),
                    'Accuracy': results['accuracy'],
                    'F1-Score': results['f1_score'],
                    'Precision': results['precision'],
                    'Recall': results['recall']
                })
            
            summary_df = pd.DataFrame(summary_data)
            st.dataframe(summary_df.style.format({
                'Accuracy': '{:.4f}',
                'F1-Score': '{:.4f}',
                'Precision': '{:.4f}',
                'Recall': '{:.4f}'
            }).highlight_max(subset=['F1-Score'], color='lightgreen'), use_container_width=True)
            
        with col2:
            st.subheader("üìà Comparaison Graphique")
            
            # Graphique de comparaison
            metrics = ['Accuracy', 'F1-Score', 'Precision', 'Recall']
            fig = go.Figure()
            
            for metric in metrics:
                values = [summary_df[summary_df['Mod√®le'] == model][metric].iloc[0] for model in summary_df['Mod√®le']]
                fig.add_trace(go.Scatter(
                    x=summary_df['Mod√®le'],
                    y=values,
                    mode='lines+markers',
                    name=metric,
                    line=dict(width=3),
                    marker=dict(size=8)
                ))
            
            fig.update_layout(
                title="Comparaison des M√©triques",
                xaxis_title="Mod√®les",
                yaxis_title="Score",
                height=400,
                hovermode='x unified'
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Matrices de confusion
        st.subheader("üîç Matrices de Confusion")
        
        selected_model = st.selectbox(
            "S√©lectionner un mod√®le",
            list(self.results.keys()),
            format_func=lambda x: x.replace('_', ' ').title()
        )
        
        if selected_model in self.results:
            conf_matrix = self.results[selected_model]['confusion_matrix']
            
            # Cr√©er la heatmap avec Plotly
            fig = px.imshow(
                conf_matrix,
                labels=dict(x="Pr√©dictions", y="Vraies valeurs", color="Nombre"),
                x=['Action', 'ETF', 'Obligation'],
                y=['Action', 'ETF', 'Obligation'],
                color_continuous_scale='Blues',
                text_auto=True,
                title=f'Matrice de Confusion - {selected_model.replace("_", " ").title()}'
            )
            
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
            
            # Rapport de classification d√©taill√©
            with st.expander("üìã Rapport de Classification D√©taill√©"):
                class_report = self.results[selected_model]['classification_report']
                
                # Convertir en DataFrame pour un meilleur affichage
                report_df = pd.DataFrame(class_report).transpose()
                st.dataframe(report_df.style.format('{:.4f}'), use_container_width=True)
    
    def predict_instrument(self, features, model_name='random_forest'):
        """Fait une pr√©diction sur un instrument"""
        # V√©rification de la coh√©rence des features
        if len(features) != len(self.feature_names):
            st.error(f"‚ùå Erreur: {len(features)} features fournies mais {len(self.feature_names)} attendues")
            return None, None
            
        # V√©rification des valeurs infinies/NaN
        features = [0 if (pd.isna(x) or np.isinf(x)) else x for x in features]
        
        models = {
            'random_forest': self.rf_model,
            'xgboost': self.xgb_model,
            'lightgbm': self.lgb_model,
            'logistic_regression': self.lr_model
        }
        
        if model_name not in models:
            st.error(f"‚ùå Mod√®le {model_name} non disponible")
            return None, None
            
        model = models[model_name]
        
        try:
            # Pr√©parer les features
            if model_name == 'logistic_regression':
                features_scaled = self.scaler.transform([features])
                prediction = model.predict(features_scaled)[0]
                probabilities = model.predict_proba(features_scaled)[0]
            else:
                prediction = model.predict([features])[0]
                probabilities = model.predict_proba([features])[0]
            
            return prediction, probabilities
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la pr√©diction avec {model_name}: {e}")
            return None, None
    
    def display_prediction(self):
        """Interface de pr√©diction"""
        st.header("üîÆ Pr√©diction d'Instrument")
        
        if not self.models_loaded:
            st.error("‚ùå Les mod√®les n'ont pas √©t√© trouv√©s. Veuillez d'abord entra√Æner les mod√®les.")
            return
        
        st.markdown("""
        Entrez les donn√©es d'un instrument financier pour pr√©dire son type.
        Vous pouvez soit entrer manuellement les valeurs, soit utiliser un symbole pour t√©l√©charger les donn√©es automatiquement.
        """)
        
        # Choix du mode de saisie
        input_mode = st.radio(
            "Mode de saisie",
            ["üì• T√©l√©chargement automatique", "‚úèÔ∏è Saisie manuelle"]
        )
        
        if input_mode == "üì• T√©l√©chargement automatique":
            self.display_automatic_prediction()
        else:
            self.display_manual_prediction()
    
    def display_automatic_prediction(self):
        """Pr√©diction automatique √† partir d'un symbole"""
        col1, col2 = st.columns([1, 1])
        
        with col1:
            symbol = st.text_input("Entrez un symbole (ex: AAPL, SPY, AGG)", "AAPL")
            
            if st.button("üìä Analyser", type="primary"):
                if symbol:
                    with st.spinner(f"T√©l√©chargement des donn√©es pour {symbol}..."):
                        try:
                            # T√©l√©charger les donn√©es
                            ticker = yf.Ticker(symbol)
                            data = ticker.history(period="1y")
                            info = ticker.info  # Donn√©es fondamentales
                            
                            if len(data) > 0:
                                # Calculer les features (version compl√®te avec info)
                                features = self.calculate_features_from_data(data, info)
                                
                                # Faire la pr√©diction avec tous les mod√®les
                                predictions = {}
                                for model_name in ['random_forest', 'xgboost', 'lightgbm', 'logistic_regression']:
                                    pred, proba = self.predict_instrument(features, model_name)
                                    predictions[model_name] = {
                                        'prediction': pred,
                                        'probabilities': proba
                                    }
                                
                                # Debug info
                                with st.expander("üîç Informations de Debug"):
                                    st.write(f"**Nombre de features calcul√©es:** {len(features)}")
                                    st.write(f"**Nombre de features attendues:** {len(self.feature_names)}")
                                    st.write(f"**Feature engineering avanc√©:** {'‚úÖ' if FEATURE_ENGINEERING_AVAILABLE else '‚ùå'}")
                                    st.write(f"**Donn√©es fondamentales:** {'‚úÖ' if info else '‚ùå'}")
                                    if len(features) <= 10:
                                        st.write(f"**Premi√®res features:** {features}")
                                
                                # Appliquer l'am√©lioration avec m√©tadonn√©es
                                refined_predictions = {}
                                for model_name, pred_data in predictions.items():
                                    pred, proba = pred_data['prediction'], pred_data['probabilities']
                                    refined_pred, refined_proba = self.refine_prediction_with_metadata(
                                        symbol, pred, proba, info
                                    )
                                    refined_predictions[model_name] = {
                                        'prediction': refined_pred,
                                        'probabilities': refined_proba,
                                        'original_prediction': pred
                                    }
                                
                                # Afficher les r√©sultats
                                with col2:
                                    self.display_prediction_results(symbol, refined_predictions)
                                
                            else:
                                st.error(f"‚ùå Aucune donn√©e trouv√©e pour {symbol}")
                                
                        except Exception as e:
                            st.error(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
    
    def calculate_features_from_data(self, data, info=None):
        """Calcule les features √† partir des donn√©es de prix et info fondamentales"""
        if not FEATURE_ENGINEERING_AVAILABLE:
            st.warning("‚ö†Ô∏è Utilisation du mode de features simplifi√©es")
            return self.calculate_features_simple(data, info)
            
        try:
            # Pr√©parer les donn√©es au format attendu
            df = data.reset_index()
            
            # V√©rification dynamique des colonnes
            expected_cols = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']
            
            # Yahoo Finance peut avoir des colonnes optionnelles
            if 'Dividends' in df.columns:
                expected_cols.append('Dividends')
            else:
                df['Dividends'] = 0.0
                
            if 'Stock Splits' in df.columns:
                expected_cols.append('Stock Splits')
            else:
                df['Stock Splits'] = 0.0
            
            # R√©organiser les colonnes de base
            base_cols = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits']
            
            # Ajouter les colonnes manquantes pour correspondre aux donn√©es d'entra√Ænement
            df['Symbol'] = 'TEMP'
            df['InstrumentType'] = 'temp'
            df['Label'] = 0
            df['Capital Gains'] = 0.0  # Ajouter la colonne manquante
            
            # R√©organiser les colonnes dans le bon ordre
            df = df[['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits', 'Symbol', 'InstrumentType', 'Label', 'Capital Gains']]
            
            # Utiliser le m√™me feature engineering que lors de l'entra√Ænement
            feature_engineer = FinancialFeatureEngineer()
            
            # Appliquer toutes les transformations
            df = feature_engineer.calculate_returns(df)
            df = feature_engineer.calculate_volatility(df)
            df = feature_engineer.calculate_moving_averages(df)
            df = feature_engineer.calculate_volume_features(df)
            df = feature_engineer.calculate_price_features(df)
            df = feature_engineer.calculate_technical_indicators(df)
            df = feature_engineer.calculate_momentum_features(df)
            
            # Prendre la derni√®re ligne (donn√©es les plus r√©centes)
            latest_row = df.iloc[-1].copy()
            
            # Ajouter les donn√©es fondamentales de Yahoo Finance info
            if info:
                latest_row['MarketCap'] = info.get('marketCap', 0)
                latest_row['Beta'] = info.get('beta', 1.0)
                latest_row['PE_Ratio'] = info.get('trailingPE', 0)
                latest_row['DividendYield'] = info.get('dividendYield', 0)
                latest_row['Volume_Avg'] = info.get('averageVolume', latest_row.get('Volume', 0))
                latest_row['Price52WeekHigh'] = info.get('fiftyTwoWeekHigh', latest_row.get('Close', 0))
                latest_row['Price52WeekLow'] = info.get('fiftyTwoWeekLow', latest_row.get('Close', 0))
            
            # Extraire les features dans le bon ordre
            feature_list = []
            for feature_name in self.feature_names:
                if feature_name in latest_row:
                    value = latest_row[feature_name]
                    # Remplacer NaN par 0
                    feature_list.append(0 if pd.isna(value) else value)
                else:
                    feature_list.append(0)
            
            return feature_list
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erreur lors du calcul des features avanc√©es: {e}")
            st.info("ÔøΩ D√©tails de debug:")
            st.code(f"""
Colonnes re√ßues: {list(data.columns)}
Nombre de colonnes: {len(data.columns)}
Index: {data.index.name}
Forme des donn√©es: {data.shape}
            """)
            st.info("ÔøΩüîÑ Basculement vers le mode de features simplifi√©es")
            return self.calculate_features_simple(data, info)
    
    def calculate_features_simple(self, data, info=None):
        """Version simplifi√©e du calcul de features (fallback)"""
        # Calculs de base
        data['Daily_Return'] = data['Close'].pct_change()
        data['Volatility_20d'] = data['Daily_Return'].rolling(20).std()
        data['MA_20d'] = data['Close'].rolling(20).mean()
        data['MA_50d'] = data['Close'].rolling(50).mean()
        data['Volume_MA_20d'] = data['Volume'].rolling(20).mean()
        
        # Prendre les valeurs les plus r√©centes
        latest = data.iloc[-1]
        
        # Cr√©er un vecteur de features (version simplifi√©e)
        features = [
            0, 0, 0,  # Dividends, Stock Splits, Capital Gains
            latest['Daily_Return'] if not pd.isna(latest['Daily_Return']) else 0,
            latest['Volatility_20d'] if not pd.isna(latest['Volatility_20d']) else 0,
            0, 0,  # Volatility_10d, autre
            latest['MA_20d'] if not pd.isna(latest['MA_20d']) else latest['Close'],
            latest['Close'] / latest['MA_20d'] if not pd.isna(latest['MA_20d']) else 1,
            0, 0, 0, 0, 0,  # Autres MA
            latest['Volume'] / latest['Volume_MA_20d'] if not pd.isna(latest['Volume_MA_20d']) else 1,
        ]
        
        # Ajouter les donn√©es fondamentales si disponibles
        if info:
            # Continuer avec les vraies valeurs
            market_cap = info.get('marketCap', 0)
            beta = info.get('beta', 1.0)
            pe_ratio = info.get('trailingPE', 0)
            div_yield = info.get('dividendYield', 0)
            volume_avg = info.get('averageVolume', latest['Volume'])
            high_52w = info.get('fiftyTwoWeekHigh', latest['Close'])
            low_52w = info.get('fiftyTwoWeekLow', latest['Close'])
        else:
            market_cap = beta = pe_ratio = div_yield = volume_avg = high_52w = low_52w = 0
        
        # Compl√©ter avec des z√©ros et ajouter les vraies valeurs importantes √† la fin
        while len(features) < len(self.feature_names) - 7:
            features.append(0)
        
        # Ajouter les features importantes √† la fin
        features.extend([market_cap, beta, pe_ratio, div_yield, volume_avg, high_52w, low_52w])
        
        return features[:len(self.feature_names)]
    
    def refine_prediction_with_metadata(self, symbol, prediction, probabilities, info):
        """Affine la pr√©diction en utilisant les m√©tadonn√©es Yahoo Finance"""
        if not info:
            return prediction, probabilities
            
        quote_type = info.get('quoteType', '').upper()
        category = info.get('category', '').lower()
        fund_family = info.get('fundFamily', '').lower()
        long_name = info.get('longName', '').lower()
        
        st.write(f"üîç **M√©tadonn√©es pour {symbol}:**")
        st.write(f"- Type: {quote_type}")
        st.write(f"- Cat√©gorie: {category}")
        st.write(f"- Famille de fonds: {fund_family}")
        
        # Si le mod√®le pr√©dit ETF, on peut pr√©ciser s'il s'agit d'un ETF obligataire
        if prediction == 1:  # ETF pr√©dit
            # Indices d'ETF obligataires
            bond_keywords = ['bond', 'treasury', 'government', 'corporate', 'municipal', 'tip', 'debt', 'fixed income']
            
            if any(keyword in category for keyword in bond_keywords) or any(keyword in long_name for keyword in bond_keywords):
                st.success(f"‚úÖ **Reclassification:** {symbol} d√©tect√© comme ETF obligataire bas√© sur '{category}'")
                return 2, probabilities  # Reclasser comme Obligation
                
        # Si c'est clairement une action mais class√©e autrement
        if quote_type == 'EQUITY' and prediction != 0:
            st.success(f"‚úÖ **Correction:** {symbol} reclass√© comme Action (quoteType=EQUITY)")
            return 0, probabilities  # Reclasser comme Action
            
        return prediction, probabilities
    
    def display_manual_prediction(self):
        """Interface de saisie manuelle"""
        st.info("üí° Entrez les principales m√©triques financi√®res pour obtenir une pr√©diction.")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("üìà Prix et Rendements")
            daily_return = st.number_input("Rendement journalier (%)", value=0.0, step=0.1, format="%.2f") / 100
            volatility = st.number_input("Volatilit√© (20j) (%)", value=2.0, step=0.1, format="%.2f") / 100
            momentum_20d = st.number_input("Momentum (20j) (%)", value=0.0, step=0.1, format="%.2f") / 100
        
        with col2:
            st.subheader("üìä Moyennes Mobiles")
            price_ma_20_ratio = st.number_input("Prix/MA(20j)", value=1.0, step=0.01, format="%.3f")
            price_ma_50_ratio = st.number_input("Prix/MA(50j)", value=1.0, step=0.01, format="%.3f")
            
        with col3:
            st.subheader("üì¶ Volume")
            volume_ratio = st.number_input("Volume/Moyenne", value=1.0, step=0.1, format="%.2f")
            volume_percentile = st.slider("Percentile de volume", 0.0, 1.0, 0.5, 0.01)
        
        if st.button("üîÆ Pr√©dire", type="primary"):
            # Cr√©er le vecteur de features (version simplifi√©e)
            features = [daily_return, volatility, price_ma_20_ratio, price_ma_50_ratio, 
                       volume_ratio, momentum_20d, volume_percentile]
            
            # Compl√©ter avec des z√©ros pour correspondre au nombre de features attendu
            while len(features) < len(self.feature_names):
                features.append(0)
            
            features = features[:len(self.feature_names)]
            
            # Faire les pr√©dictions
            predictions = {}
            for model_name in ['random_forest', 'xgboost', 'lightgbm', 'logistic_regression']:
                pred, proba = self.predict_instrument(features, model_name)
                predictions[model_name] = {
                    'prediction': pred,
                    'probabilities': proba
                }
            
            # Afficher les r√©sultats
            self.display_prediction_results("Instrument Personnalis√©", predictions)
    
    def display_prediction_results(self, symbol, predictions):
        """Affiche les r√©sultats de pr√©diction"""
        st.subheader(f"üéØ R√©sultats pour {symbol}")
        
        # Filtrer les pr√©dictions valides
        valid_predictions = {k: v for k, v in predictions.items() if v['prediction'] is not None}
        
        if not valid_predictions:
            st.error("‚ùå Aucune pr√©diction valide obtenue. Veuillez r√©essayer.")
            return
        
        # Vote majoritaire
        votes = [pred['prediction'] for pred in valid_predictions.values()]
        consensus = max(set(votes), key=votes.count)
        confidence = votes.count(consensus) / len(votes)
        
        # Affichage du consensus
        st.markdown(f"""
        <div class="success-box">
            <h3>üèÜ Pr√©diction Consensus</h3>
            <h2>{self.label_names[consensus]}</h2>
            <p>Confiance: {confidence:.0%} ({votes.count(consensus)}/{len(votes)} mod√®les d'accord)</p>
        </div>
        """, unsafe_allow_html=True)
        
        # D√©tails par mod√®le
        st.subheader("üìä D√©tails par Mod√®le")
        
        for model_name, result in valid_predictions.items():
            if result['prediction'] is None:
                continue
                
            col1, col2 = st.columns([1, 2])
            
            with col1:
                pred_label = self.label_names[result['prediction']]
                max_proba = np.max(result['probabilities'])
                
                # Afficher correction si applicable
                if 'original_prediction' in result and result['original_prediction'] != result['prediction']:
                    original_label = self.label_names[result['original_prediction']]
                    st.metric(
                        label=model_name.replace('_', ' ').title(),
                        value=f"{pred_label} ‚ú®",
                        delta=f"Corrig√© de {original_label}"
                    )
                    st.caption(f"Confiance: {max_proba:.1%}")
                else:
                    st.metric(
                        label=model_name.replace('_', ' ').title(),
                        value=pred_label,
                        delta=f"{max_proba:.1%}"
                    )
            
            with col2:
                # Graphique des probabilit√©s
                prob_df = pd.DataFrame({
                    'Classe': ['Action', 'ETF', 'Obligation'],
                    'Probabilit√©': result['probabilities']
                })
                
                fig = px.bar(
                    prob_df, 
                    x='Classe', 
                    y='Probabilit√©',
                    title=f"Probabilit√©s - {model_name.replace('_', ' ').title()}",
                    color='Probabilit√©',
                    color_continuous_scale='viridis'
                )
                fig.update_layout(height=300, showlegend=False)
                st.plotly_chart(fig, use_container_width=True)
    
    def display_data_analysis(self):
        """Affiche l'analyse des donn√©es"""
        st.header("üìà Analyse de Donn√©es")
        
        try:
            # Charger les donn√©es avec chemin absolu
            import os
            base_dir = os.path.dirname(os.path.abspath(__file__))
            data_path = os.path.join(base_dir, 'data', 'processed_financial_data.csv')
            df = pd.read_csv(data_path)
            
            st.subheader("üìä Vue d'ensemble du Dataset")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Observations", f"{len(df):,}")
            with col2:
                st.metric("Instruments", f"{df['Symbol'].nunique():,}")
            with col3:
                st.metric("P√©riode", f"{(pd.to_datetime(df['Date'].max()) - pd.to_datetime(df['Date'].min())).days} jours")
            with col4:
                st.metric("Classes", "3")
            
            # Distribution des classes
            st.subheader("üéØ Distribution des Classes")
            
            class_dist = df.groupby('InstrumentType').agg({
                'Symbol': 'nunique',
                'Date': 'count'
            }).rename(columns={'Symbol': 'Instruments', 'Date': 'Observations'})
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig = px.pie(
                    values=class_dist['Instruments'], 
                    names=class_dist.index,
                    title="R√©partition des Instruments"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                fig = px.pie(
                    values=class_dist['Observations'], 
                    names=class_dist.index,
                    title="R√©partition des Observations"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # Analyse des features principales
            st.subheader("üìä Analyse des Features Principales")
            
            selected_feature = st.selectbox(
                "S√©lectionner une feature",
                ['Daily_Return', 'Volatility_20d', 'Volume_Ratio', 'Price_MA_20d_Ratio']
            )
            
            if selected_feature in df.columns:
                fig = px.box(
                    df, 
                    x='InstrumentType', 
                    y=selected_feature,
                    title=f"Distribution de {selected_feature} par Type d'Instrument"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # Matrice de corr√©lation
            with st.expander("üîç Matrice de Corr√©lation"):
                numeric_cols = df.select_dtypes(include=[np.number]).columns[:20]  # Prendre les 20 premi√®res
                corr_matrix = df[numeric_cols].corr()
                
                fig = px.imshow(
                    corr_matrix,
                    title="Matrice de Corr√©lation",
                    color_continuous_scale='RdBu_r',
                    aspect='auto'
                )
                st.plotly_chart(fig, use_container_width=True)
            
        except FileNotFoundError:
            st.error("‚ùå Fichier de donn√©es non trouv√©. Veuillez d'abord collecter et traiter les donn√©es.")
    
    def display_about(self):
        """Affiche les informations sur le projet"""
        st.header("‚ÑπÔ∏è √Ä propos du Projet")
        
        st.markdown("""
        ## üéØ Objectif
        
        Ce projet d√©veloppe un mod√®le de machine learning supervis√© capable de classer automatiquement 
        des instruments financiers (actions, ETF, obligations) √† partir de donn√©es de march√©.
        
        ## üìä M√©thodologie
        
        ### 1. Collecte des donn√©es
        - Sources : Yahoo Finance via yfinance
        - Types d'instruments : Actions, ETF, Obligations
        - Variables : Prix historiques, volumes, ratios financiers
        
        ### 2. Feature Engineering
        - **Rendements** : Calculs de rendements journaliers et p√©riodiques
        - **Volatilit√©** : √âcart-type des rendements sur diff√©rentes fen√™tres
        - **Moyennes mobiles** : MA(5, 10, 20, 50 jours) et ratios prix/MA
        - **Volume** : Ratios et percentiles de volume
        - **Indicateurs techniques** : RSI, MACD, Bollinger Bands
        - **Momentum** : Indicateurs de tendance et d'acc√©l√©ration
        
        ### 3. Mod√®les impl√©ment√©s
        - **R√©gression Logistique** : Mod√®le lin√©aire, interpr√©table
        - **Random Forest** : Ensemble de arbres, robuste
        - **XGBoost** : Gradient boosting, haute performance
        - **LightGBM** : Gradient boosting optimis√©
        
        ### 4. √âvaluation
        - **M√©triques** : Accuracy, F1-Score, Precision, Recall
        - **Validation** : Validation crois√©e et test set
        - **Visualisation** : Matrices de confusion, importance des features
        
        ## üõ†Ô∏è Technologies utilis√©es
        
        - **Python** : Langage principal
        - **Scikit-learn** : Machine learning
        - **XGBoost / LightGBM** : Gradient boosting
        - **Pandas / NumPy** : Manipulation de donn√©es
        - **Streamlit** : Interface web
        - **Plotly** : Visualisations interactives
        - **yfinance** : Donn√©es financi√®res
        
        ## üìà R√©sultats attendus
        
        - Classification pr√©cise des instruments financiers
        - Identification des variables discriminantes
        - Interface interactive pour les pr√©dictions
        - Compr√©hension des patterns de march√©
        
        ## üë®‚Äçüíª Auteur
        
        **Built by Amine Rahmani**
        
        ### üîó Liens
        - **GitHub Repository** : [https://github.com/Amine-Rahmanii/financial-instruments-classifier](https://github.com/Amine-Rahmanii/financial-instruments-classifier)
        - **LinkedIn** : [Amine Rahmani](https://linkedin.com/in/amine-rahmani)
        
        ### üõ†Ô∏è Technologies utilis√©es
        - **Python** : Langage de programmation principal
        - **Scikit-learn** : Framework de machine learning
        - **XGBoost & LightGBM** : Mod√®les de gradient boosting
        - **Pandas & NumPy** : Manipulation et analyse de donn√©es
        - **Streamlit** : Framework pour applications web interactives
        - **Plotly** : Visualisations interactives et dashboards
        - **Matplotlib & Seaborn** : Visualisations statiques
        - **yfinance** : API pour donn√©es financi√®res Yahoo Finance
        
        ### üìä R√©sultats techniques
        - **4 mod√®les ML** entra√Æn√©s et compar√©s
        - **43 features** d'ing√©nierie financi√®re
        - **45,000 observations** sur 2 ans de donn√©es r√©elles
        - **100% de pr√©cision** sur Random Forest, XGBoost et LightGBM
        
        ---
        
        *Projet d√©velopp√© dans le cadre d'une candidature pour un stage en Data Science / Finance Quantitative.*
        """)
    
    def display_home(self):
        """Affiche la page d'accueil"""
        st.header("üè† Bienvenue")
        
        st.markdown("""
        ## üöÄ D√©marrage Rapide
        
        Cette application vous permet d'explorer un projet complet de classification d'instruments financiers 
        utilisant des techniques de machine learning avanc√©es.
        """)
        
        # Status des mod√®les
        if self.models_loaded:
            st.success("‚úÖ Mod√®les charg√©s avec succ√®s!")
            
            # Afficher quelques statistiques
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Mod√®les disponibles", "4")
            with col2:
                best_model = max(self.results.keys(), key=lambda x: self.results[x]['f1_score'])
                st.metric("Meilleur F1-Score", f"{self.results[best_model]['f1_score']:.3f}")
            with col3:
                st.metric("Classes", "3")
            
        else:
            st.warning("‚ö†Ô∏è Mod√®les non trouv√©s. Veuillez d'abord entra√Æner les mod√®les.")
        
        # Guide d'utilisation
        st.markdown("""
        ## üìñ Guide d'utilisation
        
        1. **üìä Performance des Mod√®les** : Consultez les m√©triques et matrices de confusion
        2. **üîÆ Pr√©diction** : Testez la classification sur de nouveaux instruments
        3. **üìà Analyse de Donn√©es** : Explorez le dataset et les distributions
        4. **‚ÑπÔ∏è √Ä propos** : D√©couvrez la m√©thodologie et les technologies
        
        ## üéØ Fonctionnalit√©s
        
        - ‚úÖ Classification automatique d'instruments financiers
        - ‚úÖ Comparaison de 4 mod√®les de machine learning
        - ‚úÖ Interface interactive pour les pr√©dictions
        - ‚úÖ Visualisations interactives des performances
        - ‚úÖ Analyse exploratoire des donn√©es
        
        ---
        
        ### üë®‚Äçüíª Built by **Amine Rahmani**
        üìÇ **GitHub** : [https://github.com/Amine-Rahmanii/financial-instruments-classifier](https://github.com/Amine-Rahmanii/financial-instruments-classifier)
        """)
        
        # Note technique en bas
        st.markdown("""
        <div style='margin-top: 2rem; padding: 1rem; background-color: #f0f2f6; border-radius: 0.5rem; border-left: 4px solid #1f77b4;'>
        <small>
        <strong>üîß Stack technique :</strong> Python ‚Ä¢ Scikit-learn ‚Ä¢ XGBoost ‚Ä¢ LightGBM ‚Ä¢ Streamlit ‚Ä¢ Plotly ‚Ä¢ yfinance<br>
        <strong>üìä Donn√©es :</strong> 45,000 observations ‚Ä¢ 90 instruments ‚Ä¢ 43 features ‚Ä¢ 2 ans de donn√©es Yahoo Finance
        </small>
        </div>
        """, unsafe_allow_html=True)
    
    def run(self):
        """Lance l'application"""
        self.display_header()
        
        # Sidebar
        selected_tab = self.display_sidebar()
        
        # Contenu principal bas√© sur l'onglet s√©lectionn√©
        if selected_tab == "üè† Accueil":
            self.display_home()
        elif selected_tab == "üìä Performance des Mod√®les":
            self.display_model_performance()
        elif selected_tab == "üîÆ Pr√©diction":
            self.display_prediction()
        elif selected_tab == "üìà Analyse de Donn√©es":
            self.display_data_analysis()
        elif selected_tab == "‚ÑπÔ∏è √Ä propos":
            self.display_about()

def main():
    """Fonction principale"""
    app = FinancialClassifierApp()
    app.run()

if __name__ == "__main__":
    main()
