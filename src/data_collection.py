"""
Module de collecte de donn√©es financi√®res
R√©cup√®re des donn√©es pour diff√©rents types d'instruments financiers
"""

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class FinancialDataCollector:
    def __init__(self):
        # Dictionnaire des symboles par type d'instrument
        self.instruments = {
            'stock': {
                'symbols': ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NVDA', 'JPM', 'JNJ', 'V',
                           'PG', 'UNH', 'HD', 'MA', 'BAC', 'ABBV', 'PFE', 'KO', 'AVGO', 'PEP',
                           'TMO', 'COST', 'DHR', 'ABT', 'VZ', 'ADBE', 'NFLX', 'CRM', 'TXN', 'XOM'],
                'label': 0
            },
            'etf': {
                'symbols': ['SPY', 'QQQ', 'VTI', 'IWM', 'EFA', 'VEA', 'VWO', 'VNQ', 'GLD', 'SLV',
                           'TLT', 'IEF', 'LQD', 'HYG', 'XLF', 'XLK', 'XLE', 'XLV', 'XLI', 'XLP',
                           'XLU', 'XLY', 'XLB', 'XLRE', 'VGT', 'VHT', 'VFH', 'VIS', 'VDE', 'VAW'],
                'label': 1
            },
            'bond': {
                'symbols': ['AGG', 'BND', 'VTEB', 'MUB', 'VCIT', 'VCSH', 'VGIT', 'VGSH', 'SCHZ', 'GOVT',
                           'SHY', 'IEI', 'TIP', 'VTIP', 'SCHP', 'EMB', 'BWX', 'BNDX', 'VXUS', 'IAUM',
                           'JPST', 'NEAR', 'MINT', 'ICSH', 'FLOT', 'USFR', 'TFLO', 'SCHO', 'SCHR', 'SPTS'],
                'label': 2
            }
        }
        
    def collect_data(self, period="2y", interval="1d"):
        """
        Collecte les donn√©es pour tous les instruments
        
        Args:
            period (str): P√©riode de donn√©es ('1y', '2y', '5y', etc.)
            interval (str): Intervalle ('1d', '1wk', etc.)
            
        Returns:
            pd.DataFrame: DataFrame consolid√© avec toutes les donn√©es
        """
        all_data = []
        
        print("üîÑ Collecte des donn√©es en cours...")
        
        for instrument_type, config in self.instruments.items():
            print(f"  üìä Collecte {instrument_type}...")
            
            for symbol in config['symbols']:
                try:
                    # T√©l√©charger les donn√©es
                    ticker = yf.Ticker(symbol)
                    data = ticker.history(period=period, interval=interval)
                    
                    if len(data) > 0:
                        # Ajouter les m√©tadonn√©es
                        data['Symbol'] = symbol
                        data['InstrumentType'] = instrument_type
                        data['Label'] = config['label']
                        data.reset_index(inplace=True)
                        
                        all_data.append(data)
                        
                except Exception as e:
                    print(f"    ‚ö†Ô∏è Erreur pour {symbol}: {e}")
                    continue
        
        if all_data:
            df = pd.concat(all_data, ignore_index=True)
            print(f"‚úÖ Collecte termin√©e: {len(df)} observations pour {df['Symbol'].nunique()} instruments")
            return df
        else:
            raise Exception("Aucune donn√©e collect√©e")
    
    def get_additional_metrics(self, symbols):
        """
        R√©cup√®re des m√©triques financi√®res suppl√©mentaires
        
        Args:
            symbols (list): Liste des symboles
            
        Returns:
            pd.DataFrame: DataFrame avec les m√©triques
        """
        metrics_data = []
        
        for symbol in symbols:
            try:
                ticker = yf.Ticker(symbol)
                info = ticker.info
                
                metrics = {
                    'Symbol': symbol,
                    'MarketCap': info.get('marketCap', np.nan),
                    'Beta': info.get('beta', np.nan),
                    'PE_Ratio': info.get('trailingPE', np.nan),
                    'DividendYield': info.get('dividendYield', np.nan),
                    'Volume_Avg': info.get('averageVolume', np.nan),
                    'Price52WeekHigh': info.get('fiftyTwoWeekHigh', np.nan),
                    'Price52WeekLow': info.get('fiftyTwoWeekLow', np.nan)
                }
                
                metrics_data.append(metrics)
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è Erreur m√©triques pour {symbol}: {e}")
                continue
        
        return pd.DataFrame(metrics_data)

def main():
    """Fonction principale pour collecter et sauvegarder les donn√©es"""
    
    collector = FinancialDataCollector()
    
    # Collecter les donn√©es historiques
    df = collector.collect_data(period="2y", interval="1d")
    
    # Sauvegarder les donn√©es brutes
    df.to_csv('data/raw_financial_data.csv', index=False)
    print("üíæ Donn√©es sauvegard√©es dans 'data/raw_financial_data.csv'")
    
    # Collecter les m√©triques suppl√©mentaires
    all_symbols = df['Symbol'].unique()
    metrics_df = collector.get_additional_metrics(all_symbols)
    metrics_df.to_csv('data/financial_metrics.csv', index=False)
    print("üíæ M√©triques sauvegard√©es dans 'data/financial_metrics.csv'")
    
    # Afficher un r√©sum√©
    print("\nüìà R√©sum√© des donn√©es collect√©es:")
    print(f"Total observations: {len(df):,}")
    print(f"P√©riode: {df['Date'].min().strftime('%Y-%m-%d')} √† {df['Date'].max().strftime('%Y-%m-%d')}")
    print("\nR√©partition par type d'instrument:")
    print(df.groupby('InstrumentType').agg({
        'Symbol': 'nunique',
        'Date': 'count'
    }).rename(columns={'Symbol': 'Nb_Instruments', 'Date': 'Nb_Observations'}))

if __name__ == "__main__":
    main()
